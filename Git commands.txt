初始化一个Git仓库，使用git init命令。（通过git init命令把这个目录变成Git可以管理的仓库）

添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，把文件添加到仓库。注意，可反复多次使用，添加多个文件；
$ git add readme.txt
第二步，使用命令git commit完成。
$ git commit -m "wrote a readme file"

要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
$ git diff readme.txt 

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
git log命令显示从最近到最远的提交日志
$ git log --pretty=oneline
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100

git checkout -- file可以丢弃工作区的修改
git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

从版本库中删除该文件，那就用命令git rm删掉，并且commit

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
git clone git@github.com:michaelliao/gitskills.git


Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点


Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name
